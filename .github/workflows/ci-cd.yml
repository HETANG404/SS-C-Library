name: Build, Test & Publish NuGet

on:
  push:
    branches:
      - main   # 仅在 push 到 main 分支时触发 NuGet 发布
  pull_request:
    branches:
      - main   # PR 时触发 CI 测试

jobs:
  
  versioning:
    name: Versioning & Tagging
    runs-on: ubuntu-latest
    steps:
      - name: 🚀 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整的 Git 历史

      - name: 🔢 Determine Version
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: patch  # 默认提升 patch 版本号（可改为 major/minor/patch）

      - name: 🧐 Debug Version
        run: echo "New version is ${{ steps.tag_version.outputs.new_tag }}"

  
  
  build-and-test:
    name: Build & Test
    needs: versioning
    runs-on: ubuntu-latest

    steps:
      - name: 🚀 Checkout Repository
        uses: actions/checkout@v4

      - name: 🏗 Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'   # 使用 .NET 8

      - name: 📦 Restore Dependencies
        run: dotnet restore

      - name: 🏗 Build Solution
        run: dotnet build --configuration Release --no-restore

      - name: ✅ Run Tests
        run: dotnet test src/cicdGitactionTest.Tests/cicdGitactionTest.Tests.csproj --configuration Release --no-build --logger trx


  publish-nuget:
    name: Publish to NuGet
    needs: build-and-test  # 依赖上一个 job，确保测试通过
    if: github.ref == 'refs/heads/main'  # 仅在 main 分支触发
    runs-on: ubuntu-latest
    steps:
      - name: 🚀 Checkout Repository
        uses: actions/checkout@v4

      - name: 🏗 Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: 📦 Restore Dependencies
        run: dotnet restore

      - name: 🏗 Build Solution
        run: dotnet build --configuration Release --no-restore

      - name: 📦 Pack NuGet Package
        run: dotnet pack src/cicdGitactionTest/cicdGitactionTest.csproj --configuration Release --output ./packages /p:Version=${{ needs.versioning.outputs.new_tag }}

      - name: 🧐 Debug:Check NuGet Package Location
        run: ls -R packages || echo "No NuGet package found!"

      - name: 🚀 Publish to NuGet
        run: |
          PACKAGE=$(find packages -name "*.nupkg" | head -n 1)
          if [ -z "$PACKAGE" ]; then
            echo "❌ No NuGet package found! Build might have failed."
            exit 1
          fi
          echo "✅ Found NuGet package: $PACKAGE"
          dotnet nuget push "$PACKAGE" -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json