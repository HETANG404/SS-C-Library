name: Build, Test & Publish NuGet

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  versioning:
    name: 版本控制与打 Tag
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      new_tag: ${{ steps.tag_version.outputs.new_tag }}
    steps:
      - name: 🚀 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔢 生成版本号并创建 Tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: false
          tag_prefix: "v"
          release_branches: main

      - name: 🧐 调试新版本号
        run: echo "Generated new tag:${{ steps.tag_version.outputs.new_tag }}"

      - name: ✅ 输出新版本号
        run: |
          if [[ -z "${{ steps.tag_version.outputs.new_tag }}" ]]; then
            echo "❌ ERROR: new_tag is empty!"
            exit 1
          fi
          echo "VERSION=${{ steps.tag_version.outputs.new_tag }}" >> $GITHUB_ENV

  build-and-test:
    name: 构建 & 测试
    needs: versioning
    runs-on: ubuntu-latest

    steps:
      - name: 🚀 检出代码
        uses: actions/checkout@v4

      - name: 🏗 安装 .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: 📦 还原依赖
        run: dotnet restore

      - name: 🏗 构建项目
        run: dotnet build --configuration Release --no-restore

      - name: ✅ 运行测试
        run: dotnet test src/cicdGitactionTest.Tests/cicdGitactionTest.Tests.csproj --configuration Release --no-build --logger trx

  publish-nuget:
    name: 发布 NuGet 包
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: 🚀 检出代码
        uses: actions/checkout@v4

      - name: 🏗 安装 .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: 📦 还原依赖
        run: dotnet restore

      - name: 🏗 构建项目
        run: dotnet build --configuration Release --no-restore

      - name: 🧐 检查 `VERSION`
        run: |
          if [[ -z "$VERSION" ]]; then
            echo "❌ ERROR: VERSION is empty!"
            exit 1
          fi
          echo "✅ Using Version: $VERSION"

      - name: 📦 生成 NuGet 包
        run: dotnet pack src/cicdGitactionTest/cicdGitactionTest.csproj --configuration Release --output ./packages /p:Version=${{ env.VERSION }}

      - name: 🧐 检查 NuGet 包
        run: ls -R packages || echo "❌ 未找到 NuGet 包！"

      - name: 🚀 发布 NuGet 包
        run: |
          PACKAGE=$(find packages -name "*.nupkg" | head -n 1)
          if [ -z "$PACKAGE" ]; then
            echo "❌ 未找到 NuGet 包！可能打包失败。"
            exit 1
          fi
          echo "✅ 找到 NuGet 包: $PACKAGE"
          dotnet nuget push "$PACKAGE" -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json
